#!/bin/sh

TARGET_PLATFORM=/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS7.0.sdk
TARGET_GCC=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang
TARGET_CFLAGS="-isysroot $TARGET_PLATFORM -miphoneos-version-min=7.0"

args=$@

# When we see a .s output file:
# -o ABC.s

# replace with two calls:
# -o ABC-armv7.s -arch armv7
# -o ABC-armv7s.s -arch armv7s

# When we see a .s input file and a .o output file:
# -c ABC.s -o DEF.o

# replace with two calls:
# -c ABC-armv7.s -o DEF-armv7.o -arch armv7
# -c ABC-armv7s.s -o DEF-armv7s.o -arch armv7s
# and then:
# lipo DEF-armv7.o DEF-armv7s.o to DEF.o

# When we see
# -o ABC.o
# replace with two calls:
# -o ABC-armv7.o -arch armv7
# -o ABC-armv7s.o -arch armv7s
# and then:
# lipo ABC-armv7.o ABC-armv7s.o to ABC.o

# Check if we're building an object file by looking for "-o file.o", and find its filename
# we use s|_|\1|p where _ is the match, \1 replaces it with the group in the match
# sed's -E allows extended regexes (cleaner syntax), -n suppresses non-matching input, the |p flag prints matches.
outFileNameO=$(echo "$args" | sed -En 's|.*-o ([^.]*)\.o.*|\1|p')
outFileNameS=$(echo "$args" | sed -En 's|.*-o ([^.]*)\.s.*|\1|p')



# A terrible hack:
# If the .s file is generated by llc rather than us, llc won't generate the -armv7 and -armv7s variants
# (we could write a arm-apple-darwin10-llc to do that, and then we could correctly pass '-mattr=+v7,+vfp3' to armv7 and '-mattr=+v7,+vfp4' to armv7s)
# So we just copy its output here.
inFileNameS=$(echo "$args" | sed -En 's|.*-c ([^.]*)\.s.*|\1|p')

if [[ -f $inFileNameS.s ]]; then
    cp $inFileNameS.s $inFileNameS-armv7.s
    cp $inFileNameS.s $inFileNameS-armv7s.s
fi



# Need fat calls for generating either .s or .o files
if [[ -n $outFileNameO ]]
then
    # Only need lipo when we're outputting object files
    needLipo=true
    needFatCall=true

elif [[ -n $outFileNameS ]]; then

    needFatCall=true

fi

if [[ $needFatCall == true ]]; then
    #generate -armv7 and -armv7s variants of any .s and .o files
    argsArmv7=${args/.s/-armv7.s}
    argsArmv7=${argsArmv7/.o/-armv7.o}
    argsArmv7s=${args/.s/-armv7s.s}
    argsArmv7s=${argsArmv7s/.o/-armv7s.o}
    # Call clang twice, once for each architecture, outputting to our filename variants
    $TARGET_GCC $TARGET_CFLAGS -arch armv7 $argsArmv7
    $TARGET_GCC $TARGET_CFLAGS -arch armv7s $argsArmv7s
else
    # echo "Non-object-generating compile command: $TARGET_GCC $TARGET_CFLAGS -arch armv7s $@"
    # If not building object files, call regularly. Still need to include an arch to configure clang for arm mode.
    exec $TARGET_GCC $TARGET_CFLAGS -arch armv7s "$@"
fi

if [[ $needLipo == true ]]; then
    outFileNameOArmv7=$outFileNameO-armv7
    outFileNameOArmv7s=$outFileNameO-armv7s

    # Lipo the two filename variants together
    lipo $outFileNameOArmv7.o $outFileNameOArmv7s.o -create -output $outFileNameO.o

    # Clean up
    rm $outFileNameOArmv7.o $outFileNameOArmv7s.o
fi
